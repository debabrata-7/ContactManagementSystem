"use strict";

require("core-js/modules/es.array.is-array.js");
require("core-js/modules/es.symbol.js");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.symbol.iterator.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.string.iterator.js");
require("core-js/modules/web.dom-collections.iterator.js");
require("core-js/modules/es.array.from.js");
require("core-js/modules/es.array.slice.js");
require("core-js/modules/es.date.to-string.js");
require("core-js/modules/es.regexp.to-string.js");
require("core-js/modules/es.function.name.js");
require("core-js/modules/es.object.define-property.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tsxPlugins = exports.tsPlugins = exports.parseOptions = exports.jsPlugins = exports.DefaultDecoratorPlugin = void 0;
require("core-js/modules/es.array.concat.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.match.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

// taken from https://github.com/babel/babel/blob/main/packages/babel-parser/typings/babel-parser.d.ts
// but comment out a few file-based and either-or plugins
var commonPlugins = ['asyncDoExpressions', 'asyncGenerators', 'bigInt', 'classPrivateMethods', 'classPrivateProperties', 'classProperties', 'classStaticBlock',
// Enabled by default
'decimal',
// 'decorators-legacy',
'decoratorAutoAccessors', 'destructuringPrivate', 'doExpressions', 'dynamicImport', 'explicitResourceManagement', 'exportDefaultFrom', 'exportNamespaceFrom',
// deprecated
// 'flow',
'flowComments', 'functionBind', 'functionSent', 'importMeta',
// 'jsx',
'logicalAssignment', 'importAssertions', 'importReflection', 'moduleBlocks', 'moduleStringNames', 'nullishCoalescingOperator', 'numericSeparator', 'objectRestSpread', 'optionalCatchBinding', 'optionalChaining', 'partialApplication',
// 'placeholders',
'privateIn',
// Enabled by default
'regexpUnicodeSets', 'throwExpressions', 'topLevelAwait', 'v8intrinsic',
// plugin with options
// ['decorators', {decoratorsBeforeExport: true}],
['pipelineOperator', {
  proposal: 'smart'
}], 'recordAndTuple'];
var DefaultDecoratorPlugin = exports.DefaultDecoratorPlugin = ['decorators', {
  decoratorsBeforeExport: true
}];
var jsPlugins = exports.jsPlugins = [].concat(commonPlugins, ['flow', 'jsx']);
var tsPlugins = exports.tsPlugins = [].concat(commonPlugins, ['typescript']);
var tsxPlugins = exports.tsxPlugins = [].concat(commonPlugins, ['typescript', 'jsx']);
var parseOptions = exports.parseOptions = function parseOptions(filePath, options) {
  var optionalPlugins = function optionalPlugins() {
    var _options$plugins, _options$plugins2;
    if (!(options !== null && options !== void 0 && (_options$plugins = options.plugins) !== null && _options$plugins !== void 0 && _options$plugins.decorators)) {
      return [DefaultDecoratorPlugin];
    }
    if (((_options$plugins2 = options.plugins) === null || _options$plugins2 === void 0 ? void 0 : _options$plugins2.decorators) === 'legacy') {
      return ['decorators-legacy'];
    }
    return [['decorators', options.plugins.decorators]];
  };
  if (filePath.match(/\.ts$/i)) {
    return {
      plugins: [].concat(_toConsumableArray(tsPlugins), _toConsumableArray(optionalPlugins()))
    };
  }
  if (filePath.match(/\.tsx$/i)) {
    return {
      plugins: [].concat(_toConsumableArray(tsxPlugins), _toConsumableArray(optionalPlugins()))
    };
  }

  // for backward compatibility, use js parser as default unless in strict mode
  if (!(options !== null && options !== void 0 && options.strictMode) || filePath.match(/\.m?jsx?$/i)) {
    return {
      plugins: [].concat(_toConsumableArray(jsPlugins), _toConsumableArray(optionalPlugins()))
    };
  }
  throw new TypeError("unable to find parser options for unrecognized file extension: ".concat(filePath));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tb25QbHVnaW5zIiwicHJvcG9zYWwiLCJEZWZhdWx0RGVjb3JhdG9yUGx1Z2luIiwiZXhwb3J0cyIsImRlY29yYXRvcnNCZWZvcmVFeHBvcnQiLCJqc1BsdWdpbnMiLCJjb25jYXQiLCJ0c1BsdWdpbnMiLCJ0c3hQbHVnaW5zIiwicGFyc2VPcHRpb25zIiwiZmlsZVBhdGgiLCJvcHRpb25zIiwib3B0aW9uYWxQbHVnaW5zIiwiX29wdGlvbnMkcGx1Z2lucyIsIl9vcHRpb25zJHBsdWdpbnMyIiwicGx1Z2lucyIsImRlY29yYXRvcnMiLCJtYXRjaCIsIl90b0NvbnN1bWFibGVBcnJheSIsInN0cmljdE1vZGUiLCJUeXBlRXJyb3IiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFyc2Vycy9oZWxwZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0IHR5cGUge0RlY29yYXRvcnNQbHVnaW5PcHRpb25zLCBQYXJzZXJPcHRpb25zLCBQYXJzZXJQbHVnaW5XaXRoT3B0aW9ucywgUGFyc2VyUGx1Z2lufSBmcm9tICdAYmFiZWwvcGFyc2VyJztcblxuLy8gdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYmFiZWwvYmFiZWwvYmxvYi9tYWluL3BhY2thZ2VzL2JhYmVsLXBhcnNlci90eXBpbmdzL2JhYmVsLXBhcnNlci5kLnRzXG4vLyBidXQgY29tbWVudCBvdXQgYSBmZXcgZmlsZS1iYXNlZCBhbmQgZWl0aGVyLW9yIHBsdWdpbnNcbmNvbnN0IGNvbW1vblBsdWdpbnM6IFBhcnNlclBsdWdpbltdID0gW1xuICAnYXN5bmNEb0V4cHJlc3Npb25zJyxcbiAgJ2FzeW5jR2VuZXJhdG9ycycsXG4gICdiaWdJbnQnLFxuICAnY2xhc3NQcml2YXRlTWV0aG9kcycsXG4gICdjbGFzc1ByaXZhdGVQcm9wZXJ0aWVzJyxcbiAgJ2NsYXNzUHJvcGVydGllcycsXG4gICdjbGFzc1N0YXRpY0Jsb2NrJywgLy8gRW5hYmxlZCBieSBkZWZhdWx0XG4gICdkZWNpbWFsJyxcbiAgLy8gJ2RlY29yYXRvcnMtbGVnYWN5JyxcbiAgJ2RlY29yYXRvckF1dG9BY2Nlc3NvcnMnLFxuICAnZGVzdHJ1Y3R1cmluZ1ByaXZhdGUnLFxuICAnZG9FeHByZXNzaW9ucycsXG4gICdkeW5hbWljSW1wb3J0JyxcbiAgJ2V4cGxpY2l0UmVzb3VyY2VNYW5hZ2VtZW50JyxcbiAgJ2V4cG9ydERlZmF1bHRGcm9tJyxcbiAgJ2V4cG9ydE5hbWVzcGFjZUZyb20nLCAvLyBkZXByZWNhdGVkXG4gIC8vICdmbG93JyxcbiAgJ2Zsb3dDb21tZW50cycsXG4gICdmdW5jdGlvbkJpbmQnLFxuICAnZnVuY3Rpb25TZW50JyxcbiAgJ2ltcG9ydE1ldGEnLFxuICAvLyAnanN4JyxcbiAgJ2xvZ2ljYWxBc3NpZ25tZW50JyxcbiAgJ2ltcG9ydEFzc2VydGlvbnMnLFxuICAnaW1wb3J0UmVmbGVjdGlvbicsXG4gICdtb2R1bGVCbG9ja3MnLFxuICAnbW9kdWxlU3RyaW5nTmFtZXMnLFxuICAnbnVsbGlzaENvYWxlc2NpbmdPcGVyYXRvcicsXG4gICdudW1lcmljU2VwYXJhdG9yJyxcbiAgJ29iamVjdFJlc3RTcHJlYWQnLFxuICAnb3B0aW9uYWxDYXRjaEJpbmRpbmcnLFxuICAnb3B0aW9uYWxDaGFpbmluZycsXG4gICdwYXJ0aWFsQXBwbGljYXRpb24nLFxuICAvLyAncGxhY2Vob2xkZXJzJyxcbiAgJ3ByaXZhdGVJbicsIC8vIEVuYWJsZWQgYnkgZGVmYXVsdFxuICAncmVnZXhwVW5pY29kZVNldHMnLFxuICAndGhyb3dFeHByZXNzaW9ucycsXG4gICd0b3BMZXZlbEF3YWl0JyxcbiAgJ3Y4aW50cmluc2ljJyxcbiAgLy8gcGx1Z2luIHdpdGggb3B0aW9uc1xuICAvLyBbJ2RlY29yYXRvcnMnLCB7ZGVjb3JhdG9yc0JlZm9yZUV4cG9ydDogdHJ1ZX1dLFxuICBbJ3BpcGVsaW5lT3BlcmF0b3InLCB7cHJvcG9zYWw6ICdzbWFydCd9XSxcbiAgJ3JlY29yZEFuZFR1cGxlJyxcbl07XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0RGVjb3JhdG9yUGx1Z2luOiBQYXJzZXJQbHVnaW5XaXRoT3B0aW9ucyA9IFsnZGVjb3JhdG9ycycsIHtkZWNvcmF0b3JzQmVmb3JlRXhwb3J0OiB0cnVlfV07XG5leHBvcnQgY29uc3QganNQbHVnaW5zOiBQYXJzZXJQbHVnaW5bXSA9IFsuLi5jb21tb25QbHVnaW5zLCAnZmxvdycsICdqc3gnXTtcbmV4cG9ydCBjb25zdCB0c1BsdWdpbnM6IFBhcnNlclBsdWdpbltdID0gWy4uLmNvbW1vblBsdWdpbnMsICd0eXBlc2NyaXB0J107XG5leHBvcnQgY29uc3QgdHN4UGx1Z2luczogUGFyc2VyUGx1Z2luW10gPSBbLi4uY29tbW9uUGx1Z2lucywgJ3R5cGVzY3JpcHQnLCAnanN4J107XG5cbmV4cG9ydCBpbnRlcmZhY2UgSkVTUGFyc2VyUGx1Z2luT3B0aW9ucyB7XG4gIGRlY29yYXRvcnM/OiAnbGVnYWN5JyB8IERlY29yYXRvcnNQbHVnaW5PcHRpb25zO1xufVxuZXhwb3J0IGludGVyZmFjZSBKRVNQYXJzZXJPcHRpb25zIHtcbiAgcGx1Z2lucz86IEpFU1BhcnNlclBsdWdpbk9wdGlvbnM7XG4gIHN0cmljdE1vZGU/OiBib29sZWFuO1xufVxuZXhwb3J0IGNvbnN0IHBhcnNlT3B0aW9ucyA9IChmaWxlUGF0aDogc3RyaW5nLCBvcHRpb25zPzogSkVTUGFyc2VyT3B0aW9ucyk6IFBhcnNlck9wdGlvbnMgPT4ge1xuICBjb25zdCBvcHRpb25hbFBsdWdpbnMgPSAoKTogUGFyc2VyUGx1Z2luW10gPT4ge1xuICAgIGlmICghb3B0aW9ucz8ucGx1Z2lucz8uZGVjb3JhdG9ycykge1xuICAgICAgcmV0dXJuIFtEZWZhdWx0RGVjb3JhdG9yUGx1Z2luXTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMucGx1Z2lucz8uZGVjb3JhdG9ycyA9PT0gJ2xlZ2FjeScpIHtcbiAgICAgIHJldHVybiBbJ2RlY29yYXRvcnMtbGVnYWN5J107XG4gICAgfVxuICAgIHJldHVybiBbWydkZWNvcmF0b3JzJywgb3B0aW9ucy5wbHVnaW5zLmRlY29yYXRvcnNdXTtcbiAgfTtcbiAgaWYgKGZpbGVQYXRoLm1hdGNoKC9cXC50cyQvaSkpIHtcbiAgICByZXR1cm4ge3BsdWdpbnM6IFsuLi50c1BsdWdpbnMsIC4uLm9wdGlvbmFsUGx1Z2lucygpXX07XG4gIH1cblxuICBpZiAoZmlsZVBhdGgubWF0Y2goL1xcLnRzeCQvaSkpIHtcbiAgICByZXR1cm4ge3BsdWdpbnM6IFsuLi50c3hQbHVnaW5zLCAuLi5vcHRpb25hbFBsdWdpbnMoKV19O1xuICB9XG5cbiAgLy8gZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBqcyBwYXJzZXIgYXMgZGVmYXVsdCB1bmxlc3MgaW4gc3RyaWN0IG1vZGVcbiAgaWYgKCFvcHRpb25zPy5zdHJpY3RNb2RlIHx8IGZpbGVQYXRoLm1hdGNoKC9cXC5tP2pzeD8kL2kpKSB7XG4gICAgcmV0dXJuIHtwbHVnaW5zOiBbLi4uanNQbHVnaW5zLCAuLi5vcHRpb25hbFBsdWdpbnMoKV19O1xuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihgdW5hYmxlIHRvIGZpbmQgcGFyc2VyIG9wdGlvbnMgZm9yIHVucmVjb2duaXplZCBmaWxlIGV4dGVuc2lvbjogJHtmaWxlUGF0aH1gKTtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUE7QUFDQTtBQUNBLElBQU1BLGFBQTZCLEdBQUcsQ0FDcEMs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